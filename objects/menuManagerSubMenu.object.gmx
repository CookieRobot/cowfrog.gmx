<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>menuManager</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this is the option that activates this menu
parentMenu = ""
inputBooleans();

//holds menu selection objects
height = 0;
length = 0;
//height,length
menuOptions [0,0] = noone;
//A way to identify this specific menu
name = ""
//The menu to go to if cancel is pressed
cancel = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//height
if(pressLeftChange)
{
    if (validate2DArrayPosition(menuOptions,height-1,length))
    {
        if(menuOptions[height-1,length] !=noone)
        {
            menuOptions[height,length].display.selected = false;
            height = height-1;
            menuOptions[height,length].display.selected = true;
            print("Valid Option Selected")
        }   
    }
    else
    {
        print("invalid position")
    }
}

if(pressRightChange)
{
    if (validate2DArrayPosition(menuOptions,height+1,length))
    {
        if(menuOptions[height+1,length] !=noone)
        {
            menuOptions[height,length].display.selected = false;
            height = height+1;
            menuOptions[height,length].display.selected = true;
            print("Valid Option Selected")
        }   
    }
    else
    {
        print("invalid position")
    }
}
//length
if(pressDownChange)
{
    if (validate2DArrayPosition(menuOptions,height,length+1))
    {
        if(menuOptions[height,length+1] !=noone)
        {
            menuOptions[height,length].display.selected = false;
            length = length+1;
            menuOptions[height,length].display.selected = true;
            print("Valid Option Selected")
        }   
    }
    else
    {
        print("invalid position")
    }
}

if(pressUpChange)
{
    if (validate2DArrayPosition(menuOptions,height,length-1))
    {
        if(menuOptions[height,length-1] !=noone)
        {
            menuOptions[height,length].display.selected = false;
            length = length-1;
            menuOptions[height,length].display.selected = true;
            print("Valid Option Selected")
        }   
    }
    else
    {
        print("invalid position")
    }
}

if(pressConfirmChange)
{
    with(menuOptions[height,length])
    {
        event_user(0);
        display.outFocus = true;
    }
    with (cancel)
    {
        takeControl();
        menuOptions[height,length].display.selected = true;
        menuOptions[height,length].display.outFocus = false;
    }
    
    pressConfirmChange = false;
}

if (pressCancelChange)
{
//give control to parent menu
    with(cancel)
    {
        takeControl();
        menuOptions[height,length].display.selected = true;
        menuOptions[height,length].display.outFocus = false;
    }
// go to previous option
menuOptions[height,length].display.selected = false

//find menuOption with same setting
 currentSetting = getSettings(menuOptions[height,length].name)
 
 h = array_height_2d(menuOptions)
 
 for (a = 0;a&lt;h;a++)
    {
        l = array_length_2d(menuOptions,a)
        for (b=0;b&lt;l;b++)
        {
            print(menuOptions[a,b].attribute)
            print(currentSetting)
           if(menuOptions[a,b].attribute == currentSetting)
           {
                    //set current height and length to current value
                    height = a
                    length = b
                    //set display to current value
                     menuOptions[a,b].display.outFocus = true;
                     menuOptions[a,b].display.selected = true;
                     //break loop
                     a = h
                     b = l
           }
        }
    }




    
    pressCancelChange = false;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//activate all options and take control
takeControl();
menuOptions[height,length].display.outFocus = false;
    for (a = 0;a&lt;array_height_2d(menuOptions);a++)
    {
        for (b=0;b&lt;array_length_2d(menuOptions,a);b++)
        {
            instance_activate_object(menuOptions[a,b].display)
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

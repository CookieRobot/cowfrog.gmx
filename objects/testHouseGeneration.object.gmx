<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>House_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var j = file_text_open_read("HouseGenerationInfo.json");
data = ""

while (!file_text_eof(j))
{
    
    data += file_text_read_string(j);
    file_text_readln(j);
}
file_text_close(j)
print(data);
global.map = json_decode(data);
//var palTex = sprite_get_texture(HousePalette, 0); 



print("data found")
/*
if (ds_exists(map, ds_type_map))
    {   
        
        print(ds_map_find_value(global.map,"House 0"));
        print(ds_map_find_value(global.map,"House 1"));
        print(ds_map_find_value(global.map,"House 2"));
    }
else
    {
        print("Could not parse")
    }
*/
//getHouse
size= noone;
pillars=noone;
windows=noone;
posters=noone;
crates =noone;

h1 = ds_map_find_value(global.map,"House_0")
//getSize
type = "Size"
print(type)
s = ds_map_find_value(h1,type)
size = readList(s);
print(size)
//getPillars
type = "Pillars"
print(type)
s = ds_map_find_value(h1,type)
a = readList(s);
for (i = 0; i&lt;array_length_1d(a)&amp;&amp;readList(a[i]) != noone;i++)
{

    pillars[i] = readList(a[i])
}
print(pillars)
//getWindows
type = "Windows"
print(type)
s = ds_map_find_value(h1,type)
a = readList(s);
for (i = 0; i&lt;array_length_1d(a)&amp;&amp;readList(a[i]) != noone;i++)
{
    windows[i] = readList(a[i])
}
print(windows)
//getPosters
type = "Posters"
print(type)
s = ds_map_find_value(h1,type)
a = readList(s);
for (i = 0; i&lt;array_length_1d(a)&amp;&amp;readList(a[i]) != noone;i++)
{
    posters[i] = readList(a[i])
}
print(posters)
//getCrates
type = "Crates"
print(type)
s = ds_map_find_value(h1,type)
a = readList(s);
for (i = 0; i&lt;array_length_1d(a)&amp;&amp;readList(a[i]) != noone;i++)
{
    crates[i] = readList(a[i])
}
print (crates)


pillarCount=0;
windowCount=0;
posterCount=0;
crateCount =0;

if (pillars!=noone)
{
pillarCount = array_length_1d(pillars);
}
if (windows!=noone)
{
windowCount = array_length_1d(windows);
}
if (posters!=noone)
{
posterCount = array_length_1d(posters);
}
if (crates!=noone)
{
crateCount = array_length_1d(crates);
}
//pillarChoice=0;
windowChoice[0]=0;
posterChoice[0]=0;
crateChoice[0] =0;
for (i = 0; i&lt; windowCount;i++)
{
windowChoice[i] = irandom_range(0,sprite_get_number(window)-1);
}
for (i = 0; i&lt; posterCount;i++)
{
posterChoice[i] = irandom_range(0,sprite_get_number(Posters)-1);
}
for (i = 0; i&lt; crateCount;i++)
{
crateChoice[i] = irandom_range(0,sprite_get_number(Crates)-1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i = irandom_range(0,7)
switch(i)
{
    case 0:
    sprite_index = House_0
    break;

    case 1:
        sprite_index = House_1
    break;
    
    case 2:
        sprite_index = House_2
    break;
    
    case 3:
        sprite_index = House_3
    break;
    
    case 4:
        sprite_index = House_4
    break;
    
    case 5:
        sprite_index = House_5
    break;
    
    case 6:
        sprite_index = House_6
    break;
    
    case 7:
        sprite_index = House_7
    break;


}
houseProps(sprite_get_name(sprite_index));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(hikagiShader); 

shader_set_uniform_f(shader_get_uniform(hikagiShader, "index"), 1); 
var s_tex = shader_get_sampler_index(hikagiShader, "palTexture"); 
texture_set_stage(s_tex, sprite_get_texture(HousePalette, 0)); 
draw_self();
shader_reset();
//addX = sprite_get_width(sprite_index)*(16/24)
//addY = -sprite_get_height(sprite_index)*(5/20)
for(i = 0; i&lt; posterCount;i++)
{
    array = posters[i]
    draw_sprite(Posters,posterChoice[i],x+array[0]*8,y-array[1]*8)
}
for(i = 0; i&lt; crateCount;i++)
{
    array = crates[i]
    draw_sprite(Crates,crateChoice[i],x+array[0]*8,y-array[1]*8)
}
for(i = 0; i&lt; windowCount;i++)
{
    array = windows[i]
    draw_sprite(window,windowChoice[i],x+array[0]*8,y-array[1]*8)
}
for(i = 0; i&lt; pillarCount;i++)
{
    array = pillars[i]
    draw_sprite(Pillar,0,x+array[0]*8,y-array[1]*8)
}

//draw_sprite(Posters,0,x+16*8,y-5*8)
//draw_sprite(window,0,x+10*8,y-12*8)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display = noone;
manager = noone;
settingControls = false;
setControlsID = 0
keyboardInput = false
XInput = false

setControlsID = 0;
lastPressed = 0;
setControlsText[0] ="";

setControlsText[1] ="Input Button for Jump";
setControlsText[2] ="Input Button for Attack";
setControlsText[3] ="Input Button for Confirm";
setControlsText[4] ="Input Button for Cancel";

setControlsText[5] ="Input Button for Pause";


setControlsText[6] ="Input Button for Up";
setControlsText[7] ="Input Button for Down";
setControlsText[8] ="Input Button for Left";
setControlsText[9] ="Input Button for Right";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(settingControls&amp;&amp;!gamepad_button_check(0,lastPressed)&amp;&amp;XInput)
{

for (i=gp_face1; i&lt;gp_axisrv; i++)
    {
    if gamepad_button_check_pressed(0, i)
        {
             switch(setControlsID)
            {
        case 1:
        control.gpjump = i;
        lastPressed = i;
        keyboardInput = false
        setControlsID+=1;
        break;
        case 2:
        control.gpfire = i;
        lastPressed = i;
        setControlsID+=1;
        break;
        case 3:
        control.gpconfirm = keyboard_lastkey;
        lastPressed = i;
        setControlsID+=1;
        break;
        case 4:
        control.gpcancel = keyboard_lastkey;
        lastPressed = i;
        setControlsID+=1;
        break;
        case 5:
        control.gppause = i;
        lastPressed = i;
        setControlsID+=1;
        break;
        
        case 6:
        control.gpup = i;
        lastPressed = i;
        setControlsID+=1;
        break;
        case 7:
        control.gpdown = i;
        lastPressed = i;
        setControlsID+=1;
        break;
        case 8:
        control.gpleft = i;
        lastPressed = i;
        setControlsID+=1;
        break;
        case 9:
        control.gpright = i;
        lastPressed = i;
        setControlsID=0;
        settingControls = false;
        with(manager)
        {
            takeControl();
        }
        break;
        
        
            }
        
        
        break;
        }
    }
    

    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>print("Control set up should start here")
settingControls = true;
setControlsID = 1
keyboardInput = true
XInput = true
takeControl();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red)
draw_text(88,y,setControlsText[setControlsID]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(settingControls&amp;&amp;keyboardInput)
{
    switch(setControlsID)
    {
        case 1:
        control.jump = keyboard_lastkey;
        //lock into kb setup
        XInput = false
        setControlsID+=1;
        break;
        case 2:
        control.fire = keyboard_lastkey;
        setControlsID+=1;
        break;
        case 3:
        control.confirm = keyboard_lastkey;
        setControlsID+=1;
        break;
        case 4:
        control.cancel = keyboard_lastkey;
        setControlsID+=1;
        break;
        case 5:
        control.pause = keyboard_lastkey;
        setControlsID+=1;
        break;
        
        case 6:
        control.up = keyboard_lastkey;
        setControlsID+=1;
        break;
        case 7:
        control.down = keyboard_lastkey;
        setControlsID+=1;
        break;
        case 8:
        control.left = keyboard_lastkey;
        setControlsID+=1;
        break;
        case 9:
        control.right = keyboard_lastkey;
        //setControlsID+=1;
        settingControls = false;
        setControlsID=0;
        with(manager)
        {
            takeControl();
        }
        break;
        
        
    }


}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cursorsprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//load house data 
var j = file_text_open_read("HouseGenerationInfo.json");
data = ""

while (!file_text_eof(j))
{
    
    data += file_text_read_string(j);
    file_text_readln(j);
}
file_text_close(j)
print(data);
global.map = json_decode(data);

//music 
global.BGM = noone;
global.nextTrack = noone;
//create font 
//f = font_add("Rye-Regular.ttf", 12, false, false, 32, 128);
draw_set_font(font1);

//create game settings if doesnt exist
set = instance_find(settings,0);
if set == noone
{

instance_create(0,0,settings);
}


global.screenShake = 0
global.screenShakeTimer = 0
global.resolution = 0
global.rida = 0

editSettings("resolution",2);


gpjump = gp_face1;
gppause = gp_start;
gpfire = gp_face3;
gpleft = gp_padl;
gpup = gp_padu;
gpdown = gp_padd;
gpright = gp_padr;
gpconfirm = gp_face1;
gpcancel = gp_face3;


jump = ord('A');
pause = ord('P');
fire = ord('S');
left = vk_left;
up = vk_up;
down = vk_down;
right = vk_right;
confirm = ord('A');
cancel = ord('S');


target = noone;


//pausing
draw_set_color(c_white);
paused = false;
y = 72;

global.smokeSystem=part_system_create();
global.smoke=part_type_create();
//part_type_shape(global.Particle1,pt_shape_pixel);            //This defines the particles shape
part_type_sprite(global.smoke,gunSmoke,1,0,0)
//part_type_size(global.Particle1,1,1,0,2);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
//part_type_color1(global.Particle1,c_white);                  //This sets its colour. There are three different codes for this
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.smoke,1,1,-0,0);            //The particles speed
part_type_direction(global.smoke,90,90,0,20);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.smoke,30,30);                       //this is its lifespan in steps

global.bloodSystem=part_system_create();
global.blood=part_type_create();
part_type_shape(global.blood,pt_shape_pixel);            //This defines the particles shape
//part_type_sprite(global.smoke,gunSmoke,1,0,0)
part_type_size(global.blood,.5,.5,0,0);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.blood,c_red);                  //This sets its colour. There are three different codes for this
part_type_gravity(global.blood,.35,270)
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.blood,4,7,-0,0);            //The particles speed
part_type_direction(global.blood,45,135,0,0);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.blood,90,90);                       //this is its lifespan in steps

global.woodchipSystem=part_system_create();
global.woodchip=part_type_create();
part_type_shape(global.woodchip,pt_shape_pixel);            //This defines the particles shape
//part_type_sprite(global.smoke,gunSmoke,1,0,0)
part_type_size(global.woodchip,.5,.5,0,0);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.woodchip,make_color_rgb(45,72,56));                  //This sets its colour. There are three different codes for this
part_type_gravity(global.woodchip,.35,270)
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.woodchip,4,7,-0,0);            //The particles speed
part_type_direction(global.woodchip,45,135,0,0);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.woodchip,90,90);                       //this is its lifespan in steps

global.woodChunk1System=part_system_create();
global.woodChunk1=part_type_create();
//part_type_shape(global.woodChunk,pt_shape_pixel);            //This defines the particles shape
part_type_sprite(global.woodChunk1,brokenWood1,1,0,0)
part_type_size(global.woodChunk1,.5,.5,0,0);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
//part_type_color1(global.woodChunk1,make_color_rgb(45,72,56));                  //This sets its colour. There are three different codes for this
part_type_gravity(global.woodChunk1,.35,270)
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.woodChunk1,4,7,-0,0);            //The particles speed
//part_type_direction(global.woodChunk1,45,135,0,0);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.woodChunk1,90,90);                       //this is its lifespan in steps

global.woodChunk2System=part_system_create();
global.woodChunk2=part_type_create();
//part_type_shape(global.woodChunk,pt_shape_pixel);            //This defines the particles shape
part_type_sprite(global.woodChunk2,brokenWood2,1,0,0)
part_type_size(global.woodChunk2,.5,.5,0,0);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
//part_type_color1(global.woodChunk2,make_color_rgb(45,72,56));                  //This sets its colour. There are three different codes for this
part_type_gravity(global.woodChunk2,.35,270)
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.woodChunk2,4,7,-0,0);            //The particles speed
part_type_direction(global.woodChunk2,45,135,0,0);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.woodChunk2,90,90);                       //this is its lifespan in steps

global.bloodBlueSystem=part_system_create();
global.bloodBlue=part_type_create();
part_type_shape(global.bloodBlue,pt_shape_pixel);            //This defines the particles shape
//part_type_sprite(global.smoke,gunSmoke,1,0,0)
part_type_size(global.bloodBlue,.5,.5,0,0);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.bloodBlue,c_blue);                  //This sets its colour. There are three different codes for this
part_type_gravity(global.bloodBlue,.35,270)
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.bloodBlue,4,7,-0,0);            //The particles speed
part_type_direction(global.bloodBlue,45,135,0,0);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.bloodBlue,90,90);

global.bloodBlueBigSystem=part_system_create();
global.bloodBlueBig=part_type_create();
part_type_shape(global.bloodBlueBig,pt_shape_disk);            //This defines the particles shape
//part_type_sprite(global.smoke,gunSmoke,1,0,0)
part_type_size(global.bloodBlueBig,.1,.2,0,.1);                    //This is for the size
//part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.bloodBlueBig,c_blue);                  //This sets its colour. There are three different codes for this
part_type_gravity(global.bloodBlueBig,.35,270)
//part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.bloodBlueBig,4,7,-0,0);            //The particles speed
part_type_direction(global.bloodBlueBig,45,135,0,0);            //The direction
//part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
//part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.bloodBlueBig,90,90);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//stop music
if (global.BGM!=noone)
{
audio_stop_sound(global.BGM);
}

global.BGM = global.nextTrack;
if (global.BGM!=noone)
{
    audio_play_sound(global.BGM, 10, true);
    audio_sound_set_track_position(global.BGM, 0);
    audio_sound_gain(global.BGM, 1, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reseting window size
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(target==noone)
{
    exit;
}
if paused
{
    if(keyboard_check_pressed(right)||gamepad_button_check_pressed(0, gpright))
    {
        x=view_xview[0]+160
    }
    if(keyboard_check_pressed(left)||gamepad_button_check_pressed(0, gpleft))
    {
        x=view_xview[0]+8
    }
    
    if(keyboard_check_pressed(jump)||gamepad_button_check_pressed(0, gpjump))    
    {
        paused = false
        if(x&gt;view_xview[0]+100)
        {
            
            room_goto(title);
            print("goto title")
            
        }
        else
        {
            instance_activate_all();
        }
    }
    exit;
}
//instant

target.pressJumpChange = keyboard_check_pressed(jump)||gamepad_button_check_pressed(0, gpjump);
target.pressFireChange = keyboard_check_pressed(fire)||gamepad_button_check_pressed(0, gpfire);
target.pressLeftChange=keyboard_check_pressed(left)||gamepad_button_check_pressed(0, gpleft);
target.pressRightChange = keyboard_check_pressed(right)||gamepad_button_check_pressed(0, gpright);
target.pressDownChange = keyboard_check_pressed(down)||gamepad_button_check_pressed(0, gpdown);
target.pressUpChange = keyboard_check_pressed(up)||gamepad_button_check_pressed(0, gpup);

target.pressConfirmChange = keyboard_check_pressed(confirm)||gamepad_button_check_pressed(0, gpconfirm);
target.pressCancelChange = keyboard_check_pressed(cancel)||gamepad_button_check_pressed(0, gpcancel);


target.pressPause = keyboard_check_pressed(pause)||gamepad_button_check_pressed(0, gppause);






//continuous

target.pressUp = keyboard_check(up)||gamepad_button_check(0, gpup);
target.pressDown = keyboard_check(down)||gamepad_button_check(0, gpdown)
target.pressJump = keyboard_check(jump)||gamepad_button_check(0, gpjump);
target.pressFire = keyboard_check(fire)||gamepad_button_check(0, gpfire);


target.pressLeft = keyboard_check(left)||gamepad_button_check(0, gpleft)
target.pressRight = keyboard_check(right)||gamepad_button_check(0, gpright)
target.pressUp = keyboard_check(up)||gamepad_button_check(0, gpup)
target.pressDown = keyboard_check(down)||gamepad_button_check(0, gpdown)






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//music
if (global.nextTrack != global.BGM)
{
//slowly quiet music then play next track.

audio_sound_gain(global.BGM, 0, 300);
//play next audio
alarm[1] = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if paused
{

draw_set_color(c_white);
draw_rectangle(view_xview[0],view_yview[0]+64,view_xview[0]+240,view_xview[0]+96,false);
draw_set_color(c_black);
draw_text(view_xview[0]+60,view_yview[0]+70,"Continue");
draw_text(view_xview[0]+188,view_yview[0]+70,"Title");
draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>play = noone;
popCap = 0;
size = 0;

//how to add enemies
// put in a name of your enemy (not object name) here to store the number of spawns
// then go to alarm 0 
standBoys = 0;
runBoys = 0;
dynaBoys = 0;
jumpBoys = 0;
snipeBoys = 0;
barrelCount = 0;
bigYomicCount= 0;
gubbsCount = 0
jumpBoysSpawned = 0;

jumpBoyLocation[0] = 0;
jumpBoyLocation[1] = 0;
jumpBoyLocation[2] = 0;
jumpBoyLocation[3] = 0;
jumpBoyLocation[4] = 0;


pillars=noone;
windows=noone;
posters=noone;
crates =noone;

pillarCount=0;
windowCount=0;
posterCount=0;
crateCount =0;

windowChoice[0]=0;
posterChoice[0]=0;
crateChoice[0] =0;

s_ind = shader_get_uniform(hikagiShader, "index"); 
s_tex = shader_get_sampler_index(hikagiShader, "palTexture"); 

indexValue = random(1.0); 
palTex = sprite_get_texture(HousePalette, 0); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
instance_create(jumpBoyLocation[jumpBoysSpawned],60,jumpBoy)
jumpBoysSpawned+=1;
/*for (i=0;i&lt;windowCount;i++)
{
    print(i)
    if jumpBoyLocation[i] &gt;1
    {
        print(jumpBoyLocation[i]);
        instance_create(jumpBoyLocation[i],48,jumpBoy);
    }

}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//copy the while loops
// you will need to increment the ground count if they spawn on the ground
//or the window used if they spawn in a window
//then decrement the variable you set in create
//then go to user defined
groundCount = 0;
windowsUsed = 0;
firstWindow = 0;
gap = 0;
switch(popCap)
{
    case 0:
    firstWindow = 48;
    gap = 48;
    break;
    
    case 1:
    firstWindow = 56;
    gap = 112;
    break;
    
    case 2:
    firstWindow = 64;
    gap = 48;
    break;
    
    case 3:
    firstWindow = 0;
    gap = 0;
    break;
    
    case 4:
    firstWindow = 48;
    gap = 48;
    break;
    
    case 5:
    firstWindow = 64;
    gap = 64;
    break;
    
    case 6:
    firstWindow = 73;
    gap = 0;
    break;
    
    case 7:
    firstWindow = 0;
    gap = 0;
    break;


}


while standBoys&gt;0
{
    instance_create(x+groundCount *40,144,standBoy);
    groundCount+=1;
    standBoys-=1
}
while runBoys&gt;0
{
    instance_create(x+groundCount *40,144,runBoy);
    groundCount+=1;
    runBoys-=1;
}
while barrelCount&gt;0
{
    instance_create(x+groundCount *40,136,barrel);
    groundCount+=1;
    barrelCount-=1;
}
while bigYomicCount&gt;0
{
    instance_create(x+groundCount *40,136,bigYomic);
    groundCount+=1;
    bigYomicCount-=1;
}
while dynaBoys&gt;0
{
    instance_create(x+firstWindow+windowsUsed*gap,60,dynaBoy);
    
    //draw open window
    windowChoice[windowsUsed] =0;
    windowsUsed+=1;
    dynaBoys-=1;
}

while jumpBoys&gt;0
{
    //instance_create(x+firstWindow+windowsUsed *48,58,jumpBoy);
    
    var stand = instance_create(x+firstWindow+windowsUsed*gap,0,houseTrigger);
    stand.event = 1;
    stand.master = self;
    stand.play = play;
    
    jumpBoyLocation[windowsUsed] = x+firstWindow+windowsUsed*gap;
    //draw open window
    windowChoice[windowsUsed] =0;
    windowsUsed+=1;
    jumpBoys-=1;
}

while snipeBoys&gt;0
{
    instance_create(x+firstWindow+windowsUsed *gap,60,snipeBoy);
    
    //draw open window
    windowChoice[windowsUsed] =0;
    snipeBoys-=1;
    windowsUsed+=1;
}

while gubbsCount&gt;0
{
    instance_create(x+firstWindow+windowsUsed *gap,60,gubbles);
    windowsUsed+=1;
    gubbsCount-=1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>houseProps(sprite_get_name(sprite_index));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scroll down and read the capslock comments

//print("generate triggers ");
//generate cowboys
maxCowboys = 0;
maxWindowboys = 0;
maxBoys = 0;
print("type")
print(popCap)
switch(popCap)
{
    case 0:
    maxCowboys = 4
    maxWindowboys = 3
    maxBoys = 7;
    break;
    case 1:
    maxCowboys = 4
    maxWindowboys = 2
    maxBoys = 6;
    break;
    case 2:
    maxCowboys = 4
    maxWindowboys = 3
    maxBoys = 7;
    break;
    case 3:
    maxCowboys = 3
    maxWindowboys = 0
    maxBoys = 3;
    break;
    case 4:
    maxCowboys = 4
    maxWindowboys = 4
    maxBoys = 8;
    break;
    case 5:
    maxCowboys = 3
    maxWindowboys = 2
    maxBoys = 5;
    break;
    case 6:
    maxCowboys = 3
    maxWindowboys = 1
    maxBoys = 4;
    break;
    case 7:
    maxCowboys = 3
    maxWindowboys = 0
    maxBoys = 3;
    break;


}
print("maxBoys");
print(maxBoys);
cowboyCount = irandom_range(2,maxBoys-3)
cowboyCount-= 1-floor(global.town*.25)
if(cowboyCount&gt; maxBoys)
{
cowboyCount= maxBoys
}

print(cowboyCount)
//standBoys = 0;
//runBoys = 0;
//dynaBoys = 0;
//jumpBoys = 0;
//snipeBoys = 0;
while cowboyCount&gt;0
{
    cowboyCount -=1;
    //1 = window spawn
    //0 = ground spawn
    chooseLocation = irandom_range(0,1)
    
        if chooseLocation ==0&amp;&amp; maxCowboys &gt;0
        {
            maxCowboys -=1;
        }
        else 
        {
            chooseLocation = 1;
        }
        
        if chooseLocation ==1&amp;&amp; maxWindowboys &gt;0
        {
            maxWindowboys -=1;
        }
        else 
        {
            chooseLocation = 0;
        }
        
        
    if (chooseLocation == 1)
    {
        //IF THEY SPAWN IN A WINDOW ADD ANOTHER CASE HEREAND INCREMENT THE ENEMY COUNT AND INCREASE THE RANDOM RANGE
        
        //spawn only 1 gubbs 
        
        chooseBoy = irandom_range(0,3-gubbsCount)
        switch(chooseBoy)
        {
            case 0: 
            
                
                    dynaBoys+=1;
            
            break;
            case 1:
        
                
                    jumpBoys+=1;
            
            break;
            case 2:
        
                
                    snipeBoys+=1;
            
            break;  
            case 3:
        
                
                    gubbsCount=1;
            
            break;    
        }
    }
    else
    {
        //IF THEY SPAWN ON THE GROUND ADD ANOTHER CASE HERE AND INCREMENT THE ENEMY COUNT AND INCREASE THE RANDOM RANGE
        chooseBoy = irandom_range(0,3)
        switch(chooseBoy)
        {
           case 0: //standboy
            
                
                    standBoys+=1;
            
            break;
            case 1:
        
                
                    runBoys+=1;
            
            break;    
            case 2:
        
                
                    barrelCount+=1;
            
            break; 
            case 3:
        
                
                    bigYomicCount+=1;
            
            break;    
        }
    
    }
}



//create triggers

var stand = instance_create(x-150,0,houseTrigger);
stand.event = 0;
stand.master = self;
stand.play = play;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
shader_set(hikagiShader); 

shader_set_uniform_f(s_ind, indexValue); 
texture_set_stage(s_tex, palTex); 

draw_self();

for(i = 0; i&lt; windowCount;i++)
{
    array = windows[i]
    draw_sprite(window,windowChoice[i],x+array[0]*8,y-array[1]*8)
}
for(i = 0; i&lt; pillarCount;i++)
{
    array = pillars[i]
    draw_sprite(Pillar,0,x+array[0]*8,y-array[1]*8)
}

shader_reset(); 


//addX = sprite_get_width(sprite_index)*(16/24)
//addY = -sprite_get_height(sprite_index)*(5/20)
for(i = 0; i&lt; posterCount;i++)
{
    array = posters[i]
    draw_sprite(Posters,posterChoice[i],x+array[0]*8,y-array[1]*8)
}
for(i = 0; i&lt; crateCount;i++)
{
    array = crates[i]
    draw_sprite(Crates,crateChoice[i],x+array[0]*8,y-array[1]*8)
}


//draw_sprite(Posters,0,x+16*8,y-5*8)
//draw_sprite(window,0,x+10*8,y-12*8)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
